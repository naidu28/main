// BlackjackHandDemo.java - John K. Estell - 16 February 2004
// Last modified: 17 Febraury 2004
// Demonstration program for the basic extension of the Hand class

//package cardgame;

import java.awt.*;
import javax.swing.*;
import java.util.*;

/**
 * A basic extension of the javax.swing.JApplet class
 */
public class BlackjackHandDemo extends JApplet {
    private Deck cardDeck, hDeck, cDeck;
    private BlackjackHand myHand;
    private BlackjackHand compHand;
    private final int SIZE_OF_HAND = 3;
    private final String directory = "cards/";
    private JLabel[] handLbl = new JLabel[ SIZE_OF_HAND ];
    private JLabel[] compLbl = new JLabel[ SIZE_OF_HAND ];
    
    public void init()
    {
    	// This line prevents the "Swing: checked access to system event queue" message seen in some browsers.
    	getRootPane().putClientProperty("defeatSystemEventQueueCheck", Boolean.TRUE);
    	
    	// This code is automatically generated by Visual Cafe when you add
    	// components to the visual environment. It instantiates and initializes
    	// the components. To modify the code, only use code syntax that matches
    	// what Visual Cafe can generate, or Visual Cafe may be unable to back
    	// parse your Java file into its visual environment.
    	//{{INIT_CONTROLS
    	getContentPane().setLayout(null);
    	getContentPane().setBackground(java.awt.Color.cyan);
    	setSize(900,700);
    	//card 1
    	JLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    	JLabel1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    	JLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    	JLabel1.setText("Card");
    	JLabel1.setOpaque(true);
    	JLabel1.setToolTipText("This is a card.");
    	getContentPane().add(JLabel1);
    	JLabel1.setForeground(java.awt.Color.black);
    	JLabel1.setFont(new Font("Dialog", Font.BOLD, 10));
    	JLabel1.setBounds(20,550,101,125);
    	//Card 2
    	JLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    	JLabel2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    	JLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    	JLabel2.setText("Card");
    	JLabel2.setOpaque(true);
    	JLabel2.setToolTipText("This is a card.");
    	getContentPane().add(JLabel2);
    	JLabel2.setForeground(java.awt.Color.black);
    	JLabel2.setFont(new Font("Dialog", Font.BOLD, 10));
    	JLabel2.setBounds(150,550,101,125);
    	//Card 3
    	JLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    	JLabel3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    	JLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    	JLabel3.setText("Card");
    	JLabel3.setOpaque(true);
    	JLabel3.setToolTipText("This is a card.");
    	getContentPane().add(JLabel3);
    	JLabel3.setForeground(java.awt.Color.black);
    	JLabel3.setFont(new Font("Dialog", Font.BOLD, 10));
    	JLabel3.setBounds(280,550,101,125);
    	//Card 4
    	JLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    	JLabel4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    	JLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    	JLabel4.setText("Card");
    	JLabel4.setOpaque(true);
    	JLabel4.setToolTipText("This is a card.");
    	getContentPane().add(JLabel4);
    	JLabel4.setForeground(java.awt.Color.black);
    	JLabel4.setFont(new Font("Dialog", Font.BOLD, 10));
    	JLabel4.setBounds(20,25,101,125);
    	//Card 5
    	JLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    	JLabel5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    	JLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    	JLabel5.setText("Card");
    	JLabel5.setOpaque(true);
    	JLabel5.setToolTipText("This is a card.");
    	getContentPane().add(JLabel5);
    	JLabel5.setForeground(java.awt.Color.black);
    	JLabel5.setFont(new Font("Dialog", Font.BOLD, 10));
    	JLabel5.setBounds(150,25,101,125);
    	//Card 6
    	JLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    	JLabel6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    	JLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    	JLabel6.setText("Card");
    	JLabel6.setOpaque(true);
    	JLabel6.setToolTipText("This is a card.");
    	getContentPane().add(JLabel6);
    	JLabel6.setForeground(java.awt.Color.black);
    	JLabel6.setFont(new Font("Dialog", Font.BOLD, 10));
    	JLabel6.setBounds(280,25,101,125);
    	JButton1.setText("Draw a Hand");
    	JButton1.setActionCommand("Draw a Hand");
    	getContentPane().add(JButton1);
    	JButton1.setBounds(500,156,212,32);
    	scoreLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    	scoreLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    	getContentPane().add(scoreLbl);
    	scoreLbl.setForeground(java.awt.Color.black);
    	scoreLbl.setFont(new Font("Dialog", Font.BOLD, 64));
    	scoreLbl.setBounds(500,48,103,88);
    	//}}
    			
    	// add the JLabel array mapping for player
    	handLbl[0] = JLabel1;
    	handLbl[1] = JLabel2;
    	handLbl[2] = JLabel3;
    	
    	// add the JLabel array mapping for computer
    	compLbl[0] = JLabel4;
    	compLbl[1] = JLabel5;
    	compLbl[2] = JLabel6;
    
    	
    	// add the Card instantiations here
    	cardDeck = new Deck();
    	
    	Iterator suitIterator = Suit.VALUES.iterator();
    	while ( suitIterator.hasNext() ) {
    	    Suit suit = (Suit) suitIterator.next();
    	    Iterator rankIterator = Rank.VALUES.iterator();
    	    while ( rankIterator.hasNext() ) {
    	        Rank rank = (Rank) rankIterator.next();
    	        String imageFile = directory + Card.getFilename( suit, rank );
    	        ImageIcon cardImage = new ImageIcon( getImage( getCodeBase(), imageFile ) );
    	        Card card = new Card( suit, rank, cardImage );
    	        cardDeck.addCard( card );
    	    }
    	}
    	cardDeck.shuffle();
    	cardDeck.restoreDeck(); //sets index inside Deck class to 0 - starts on
    	                        //top card again
    	//All the code before this creates a deck with 52 cards called "cardDeck"
    	
    	hDeck = new Deck();
    	cDeck = new Deck();

    	for (int index = 0; index < cardDeck.getSizeOfDeck()/2; index++) {
    	    Card c = cardDeck.dealCard();
    	    hDeck.addCard( c );
    	}
    	
    	for (int index = 0; index < cardDeck.getSizeOfDeck()/2; index++) {
    	    Card c = cardDeck.dealCard(); //note: could cause problems later
    	    cDeck.addCard( c );           // if card dealt == null 
    	}
    	
    	
    	
    	
    	// set up the initial hand
    	myHand = new BlackjackHand();
    	compHand = new BlackjackHand();
    	boolean tie = false;
    	
    	// add the displaying of cards here
    	//1. Draw 1 card each for both "myHand" and "compHand"
    	//2. Compare their ranks in an if statement
    	//3. If they have equal ranks, enter a new loop and and two cards
    	//   to both hands
    	Card drawnCardH = hDeck.dealCard();
    	myHand.addCard( drawnCardH );
    	Card drawnCardC = cDeck.dealCard();
    	compHand.addCard( drawnCardC );
    	if (drawnCardC.getRank().compareTo(drawnCardH.getRank()) == 0) { // will return 0 if equal
    	    //add logic for two new cards per player
    	    Card drawnCardH2 = hDeck.dealCard(); //2nd draw
    	    myHand.addCard( drawnCardH2 );
    	    Card drawnCardC2 = cDeck.dealCard();
    	    compHand.addCard( drawnCardC2 );
    	    
    	    Card drawnCardH3 = hDeck.dealCard(); //3rd draw
    	    myHand.addCard( drawnCardH3 );
    	    Card drawnCardC3 = cDeck.dealCard();
    	    compHand.addCard( drawnCardC3 );
    	    tie = true;
    	}
    
        if (tie == true) { //this is testing if tie == true. It's shorthand
    	    for ( int i = 0; i < SIZE_OF_HAND; i++ ) {
    	        Card c1 = myHand.getCard( i );
    	        handLbl[i].setIcon( c1.getCardImage() );
    	        handLbl[i].setText( c1.toString() );
    	        Card c2 = compHand.getCard( i );
    	        compLbl[i].setIcon( c2.getCardImage() );
    	        compLbl[i].setText ( c2.toString() );
    	    }
    	} else {
    	    Card c1 = myHand.getCard( 0 );
    	    handLbl[0].setIcon( c1.getCardImage() );
    	    handLbl[0].setText( c1.toString() );
    	    Card c2 = compHand.getCard( 0 );
            compLbl[0].setIcon( c2.getCardImage() );
            compLbl[0].setText ( c2.toString() );
            
            handLbl[1] = null;
            handLbl[2] = null;
            compLbl[1] = null;
            compLbl[2] = null;
    	}
    	
    	showBlackjackScore();
    	
    	
    
    	//{{REGISTER_LISTENERS
    	SymAction lSymAction = new SymAction();
    	JButton1.addActionListener(lSymAction);
    	//}}
    }
    
    //{{DECLARE_CONTROLS
    javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
    javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
    javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
    javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
    javax.swing.JLabel JLabel5 = new javax.swing.JLabel();
    javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
    javax.swing.JButton JButton1 = new javax.swing.JButton();
    javax.swing.JLabel scoreLbl = new javax.swing.JLabel();
    //}}
    
    
    private void showBlackjackScore() {
        int score = myHand.evaluateHand();
        if ( score == 21 ) {
            scoreLbl.setText( score + "!" );
            scoreLbl.setForeground( Color.red );
        }
        else {
            scoreLbl.setText( "" + score );
            scoreLbl.setForeground( Color.black );
        }
    }
    
    
    class SymAction implements java.awt.event.ActionListener
    {
    	public void actionPerformed(java.awt.event.ActionEvent event)
    	{
    		Object object = event.getSource();
    		if (object == JButton1)
    			JButton1_actionPerformed(event);
    		
    	}
    }
    
    void JButton1_actionPerformed(java.awt.event.ActionEvent event)
    {
    	boolean tie = false;
    	myHand.discardHand();
    	compHand.discardHand();
    	// to do: code goes here.
    	Card drawnCardH = hDeck.dealCard();
    	myHand.addCard( drawnCardH );
    	Card drawnCardC = cDeck.dealCard();
    	compHand.addCard( drawnCardC );
    	if (drawnCardC.isSameAs(drawnCardH)) { // will return 0 if equal
    	    //add logic for two new cards per player
    	    Card drawnCardH2 = hDeck.dealCard(); //2nd draw
    	    myHand.addCard( drawnCardH2 );
    	    Card drawnCardC2 = cDeck.dealCard();
    	    compHand.addCard( drawnCardC2 );
    	    
    	    Card drawnCardH3 = hDeck.dealCard(); //3rd draw
    	    myHand.addCard( drawnCardH3 );
    	    Card drawnCardC3 = cDeck.dealCard();
    	    compHand.addCard( drawnCardC3 );
    	    tie = true;
    	}
    
        /*if (tie == true) { //this is testing if tie == true. It's shorthand
    	    for ( int i = 0; i < SIZE_OF_HAND; i++ ) {
    	        Card c1 = myHand.getCard( i );
    	        handLbl[i].setIcon( c1.getCardImage() );
    	        handLbl[i].setText( c1.toString() );
    	        Card c2 = compHand.getCard( i );
    	        compLbl[i].setIcon( c2.getCardImage() );
    	        compLbl[i].setText ( c2.toString() );
    	    }
    	} else {*/
    	    Card c1 = myHand.getCard( 0 );
    	    handLbl[0].setIcon( c1.getCardImage() );
    	    handLbl[0].setText( c1.toString() );
    	    Card c2 = compHand.getCard( 0 );
            compLbl[0].setIcon( c2.getCardImage() );
            compLbl[0].setText ( c2.toString() );
            
            handLbl[1] = null;
            handLbl[2] = null;
            compLbl[1] = null;
            compLbl[2] = null;
    	//}
        	/*cardDeck.restoreDeck();
        	cardDeck.shuffle();
        	myHand.discardHand();
        	for ( int i = 0; i < SIZE_OF_HAND; i++ ) {
        	   Card c = cardDeck.dealCard();
        	   myHand.addCard( c );
        	   handLbl[i].setIcon( c.getCardImage() );
        	   handLbl[i].setText( c.toString() );
            }*/
        showBlackjackScore();
    }
}	

/*private Deck cardDeck;
private BlackjackHand myHand;
private BlackjackHand compHand;
private final int SIZE_OF_HAND = 3;
private final String directory = "cards/";
private JLabel[] handLbl = new JLabel[ SIZE_OF_HAND ];
private JLabel[] compLbl = new JLabel[ SIZE_OF_HAND ];

public void init()
{
	// This line prevents the "Swing: checked access to system event queue" message seen in some browsers.
	getRootPane().putClientProperty("defeatSystemEventQueueCheck", Boolean.TRUE);
	
	// This code is automatically generated by Visual Cafe when you add
	// components to the visual environment. It instantiates and initializes
	// the components. To modify the code, only use code syntax that matches
	// what Visual Cafe can generate, or Visual Cafe may be unable to back
	// parse your Java file into its visual environment.
	//{{INIT_CONTROLS
	getContentPane().setLayout(null);
	getContentPane().setBackground(java.awt.Color.cyan);
	setSize(900,700);
	//card 1
	JLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
	JLabel1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
	JLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	JLabel1.setText("Card");
	JLabel1.setOpaque(true);
	JLabel1.setToolTipText("This is a card.");
	getContentPane().add(JLabel1);
	JLabel1.setForeground(java.awt.Color.black);
	JLabel1.setFont(new Font("Dialog", Font.BOLD, 10));
	JLabel1.setBounds(20,550,101,125);
	//Card 2
	JLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
	JLabel2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
	JLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	JLabel2.setText("Card");
	JLabel2.setOpaque(true);
	JLabel2.setToolTipText("This is a card.");
	getContentPane().add(JLabel2);
	JLabel2.setForeground(java.awt.Color.black);
	JLabel2.setFont(new Font("Dialog", Font.BOLD, 10));
	JLabel2.setBounds(150,550,101,125);
	//Card 3
	JLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
	JLabel3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
	JLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	JLabel3.setText("Card");
	JLabel3.setOpaque(true);
	JLabel3.setToolTipText("This is a card.");
	getContentPane().add(JLabel3);
	JLabel3.setForeground(java.awt.Color.black);
	JLabel3.setFont(new Font("Dialog", Font.BOLD, 10));
	JLabel3.setBounds(280,550,101,125);
	//Card 4
	JLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
	JLabel4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
	JLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	JLabel4.setText("Card");
	JLabel4.setOpaque(true);
	JLabel4.setToolTipText("This is a card.");
	getContentPane().add(JLabel4);
	JLabel4.setForeground(java.awt.Color.black);
	JLabel4.setFont(new Font("Dialog", Font.BOLD, 10));
	JLabel4.setBounds(20,25,101,125);
	//Card 5
	JLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
	JLabel5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
	JLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	JLabel5.setText("Card");
	JLabel5.setOpaque(true);
	JLabel5.setToolTipText("This is a card.");
	getContentPane().add(JLabel5);
	JLabel5.setForeground(java.awt.Color.black);
	JLabel5.setFont(new Font("Dialog", Font.BOLD, 10));
	JLabel5.setBounds(150,25,101,125);
	//Card 6
	JLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
	JLabel6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
	JLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	JLabel6.setText("Card");
	JLabel6.setOpaque(true);
	JLabel6.setToolTipText("This is a card.");
	getContentPane().add(JLabel6);
	JLabel6.setForeground(java.awt.Color.black);
	JLabel6.setFont(new Font("Dialog", Font.BOLD, 10));
	JLabel6.setBounds(280,25,101,125);
	JButton1.setText("Draw a Hand");
	JButton1.setActionCommand("Draw a Hand");
	getContentPane().add(JButton1);
	JButton1.setBounds(500,156,212,32);
	scoreLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
	scoreLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	getContentPane().add(scoreLbl);
	scoreLbl.setForeground(java.awt.Color.black);
	scoreLbl.setFont(new Font("Dialog", Font.BOLD, 64));
	scoreLbl.setBounds(500,48,103,88);
	//}}
			
	// add the JLabel array mapping for player
	handLbl[0] = JLabel1;
	handLbl[1] = JLabel2;
	handLbl[2] = JLabel3;
	
	// add the JLabel array mapping for computer
	compLbl[0] = JLabel4;
	compLbl[1] = JLabel5;
	compLbl[2] = JLabel6;

	
	// add the Card instantiations here
	cardDeck = new Deck();
	
	Iterator suitIterator = Suit.VALUES.iterator();
	while ( suitIterator.hasNext() ) {
	    Suit suit = (Suit) suitIterator.next();
	    Iterator rankIterator = Rank.VALUES.iterator();
	    while ( rankIterator.hasNext() ) {
	        Rank rank = (Rank) rankIterator.next();
	        String imageFile = directory + Card.getFilename( suit, rank );
	        ImageIcon cardImage = new ImageIcon( getImage( getCodeBase(), imageFile ) );
	        Card card = new Card( suit, rank, cardImage );
	        cardDeck.addCard( card );
	    }
	}
	
	// set up the initial hand
	myHand = new BlackjackHand();
	compHand = new BlackjackHand();
	boolean tie = false;
	
	// add the displaying of cards here
	//1. Draw 1 card each for both "myHand" and "compHand"
	//2. Compare their ranks in an if statement
	//3. If they have equal ranks, enter a new loop and and two cards
	//   to both hands
	Card drawnCardH = cardDeck.dealCard();
	myHand.addCard( drawnCardH );
	Card drawnCardC = cardDeck.dealCard();
	compHand.addCard( drawnCardC );
	if (drawnCardC.getRank().compareTo(drawnCardH.getRank()) == 0) { // will return 0 if equal
	    //add logic for two new cards per player
	    Card drawnCardH2 = cardDeck.dealCard(); //2nd draw
	    myHand.addCard( drawnCardH2 );
	    Card drawnCardC2 = cardDeck.dealCard();
	    compHand.addCard( drawnCardC2 );
	    
	    Card drawnCardH3 = cardDeck.dealCard(); //3rd draw
	    myHand.addCard( drawnCardH3 );
	    Card drawnCardC3 = cardDeck.dealCard();
	    compHand.addCard( drawnCardC3 );
	    tie = true;
	}

    if (tie == true) { //this is testing if tie == true. It's shorthand
	    for ( int i = 0; i < SIZE_OF_HAND; i++ ) {
	        Card c1 = myHand.getCard( i );
	        handLbl[i].setIcon( c1.getCardImage() );
	        handLbl[i].setText( c1.toString() );
	        Card c2 = compHand.getCard( i );
	        compLbl[i].setIcon( c2.getCardImage() );
	        compLbl[i].setText ( c2.toString() );
	    }
	} else {
	    Card c1 = myHand.getCard( 0 );
	    handLbl[0].setIcon( c1.getCardImage() );
	    handLbl[0].setText( c1.toString() );
	    Card c2 = compHand.getCard( 0 );
        compLbl[0].setIcon( c2.getCardImage() );
        compLbl[0].setText ( c2.toString() );
        
        handLbl[1] = null;
        handLbl[2] = null;
        compLbl[1] = null;
        compLbl[2] = null;
	}
	
	showBlackjackScore();
	
	

	//{{REGISTER_LISTENERS
	SymAction lSymAction = new SymAction();
	JButton1.addActionListener(lSymAction);
	//}}
}

//{{DECLARE_CONTROLS
javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
javax.swing.JLabel JLabel5 = new javax.swing.JLabel();
javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
javax.swing.JButton JButton1 = new javax.swing.JButton();
javax.swing.JLabel scoreLbl = new javax.swing.JLabel();
//}}


private void showBlackjackScore() {
    int score = myHand.evaluateHand();
    if ( score == 21 ) {
        scoreLbl.setText( score + "!" );
        scoreLbl.setForeground( Color.red );
    }
    else {
        scoreLbl.setText( "" + score );
        scoreLbl.setForeground( Color.black );
    }
}


class SymAction implements java.awt.event.ActionListener
{
	public void actionPerformed(java.awt.event.ActionEvent event)
	{
		Object object = event.getSource();
		if (object == JButton1)
			JButton1_actionPerformed(event);
		
	}
}

void JButton1_actionPerformed(java.awt.event.ActionEvent event)
{
	// to do: code goes here.
	cardDeck.restoreDeck();
	cardDeck.shuffle();
	myHand.discardHand();
	for ( int i = 0; i < SIZE_OF_HAND; i++ ) {
	   Card c = cardDeck.dealCard();
	   myHand.addCard( c );
	   handLbl[i].setIcon( c.getCardImage() );
	   handLbl[i].setText( c.toString() );
    }
    
    showBlackjackScore();
}
}















{
    private Deck cardDeck;
    private BlackjackHand myHand;
    private final int SIZE_OF_HAND = 2;
    private final String directory = "cards/";
    private JLabel[] handLbl = new JLabel[ SIZE_OF_HAND ];
    
	public void init()
	{
		// This line prevents the "Swing: checked access to system event queue" message seen in some browsers.
		getRootPane().putClientProperty("defeatSystemEventQueueCheck", Boolean.TRUE);
		
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		getContentPane().setLayout(null);
		getContentPane().setBackground(java.awt.Color.cyan);
		setSize(383,203);
		JLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		JLabel1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		JLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		JLabel1.setText("Card");
		JLabel1.setOpaque(true);
		JLabel1.setToolTipText("This is a card.");
		getContentPane().add(JLabel1);
		JLabel1.setForeground(java.awt.Color.black);
		JLabel1.setFont(new Font("Dialog", Font.BOLD, 10));
		JLabel1.setBounds(12,12,101,125);
		JLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		JLabel2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		JLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		JLabel2.setText("Card");
		JLabel2.setOpaque(true);
		JLabel2.setToolTipText("This is a card.");
		getContentPane().add(JLabel2);
		JLabel2.setForeground(java.awt.Color.black);
		JLabel2.setFont(new Font("Dialog", Font.BOLD, 10));
		JLabel2.setBounds(120,12,101,125);
		JButton1.setText("Draw a Hand");
		JButton1.setActionCommand("Draw a Hand");
		getContentPane().add(JButton1);
		JButton1.setBounds(12,156,212,32);
		scoreLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		scoreLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		getContentPane().add(scoreLbl);
		scoreLbl.setForeground(java.awt.Color.black);
		scoreLbl.setFont(new Font("Dialog", Font.BOLD, 64));
		scoreLbl.setBounds(252,48,103,88);
		//}}
				
		// add the JLabel array mapping here
		handLbl[0] = JLabel1;
		handLbl[1] = JLabel2;
		
		// add the Card instantiations here
		cardDeck = new Deck();
		
		Iterator suitIterator = Suit.VALUES.iterator();
		while ( suitIterator.hasNext() ) {
		    Suit suit = (Suit) suitIterator.next();
		    Iterator rankIterator = Rank.VALUES.iterator();
		    while ( rankIterator.hasNext() ) {
		        Rank rank = (Rank) rankIterator.next();
		        String imageFile = directory + Card.getFilename( suit, rank );
		        ImageIcon cardImage = new ImageIcon( getImage( getCodeBase(), imageFile ) );
		        Card card = new Card( suit, rank, cardImage );
		        cardDeck.addCard( card );
		    }
		}
		
		// set up the initial hand
		myHand = new BlackjackHand();
		
		// add the displaying of cards here
		for ( int i = 0; i < SIZE_OF_HAND; i++ ) {
		    Card drawnCard = cardDeck.dealCard();
		    myHand.addCard( drawnCard );
		}
		
		for ( int i = 0; i < SIZE_OF_HAND; i++ ) {
		    Card c = myHand.getCard( i );
		    handLbl[i].setIcon( c.getCardImage() );
		    handLbl[i].setText( c.toString() );
		}
		
		showBlackjackScore();
		
		
	
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		JButton1.addActionListener(lSymAction);
		//}}
	}

	//{{DECLARE_CONTROLS
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JButton JButton1 = new javax.swing.JButton();
	javax.swing.JLabel scoreLbl = new javax.swing.JLabel();
	//}}


    private void showBlackjackScore() {
        int score = myHand.evaluateHand();
        if ( score == 21 ) {
            scoreLbl.setText( score + "!" );
            scoreLbl.setForeground( Color.red );
        }
        else {
            scoreLbl.setText( "" + score );
            scoreLbl.setForeground( Color.black );
        }
    }
    
    
	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == JButton1)
				JButton1_actionPerformed(event);
			
		}
	}

	void JButton1_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		cardDeck.restoreDeck();
		cardDeck.shuffle();
		myHand.discardHand();
		for ( int i = 0; i < SIZE_OF_HAND; i++ ) {
		   Card c = cardDeck.dealCard();
		   myHand.addCard( c );
		   handLbl[i].setIcon( c.getCardImage() );
		   handLbl[i].setText( c.toString() );
	    }
	    
	    showBlackjackScore();
	}
}*/